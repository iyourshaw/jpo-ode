# This docker-compose file configures PPM modules with self contained configuration and map files
# So the module can run without reliance on a shared volume. This was done to avoid corporate network
# and machine dress-code restrictions that would not permit the container sharing volume with host.

version: '3'
services:
  kafka:
    image: bitnami/kafka:latest
    hostname: kafka
    ports:
      - "9092:9092"
    volumes:
      - "${DOCKER_SHARED_VOLUME}:/bitnami"
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9094,CONTROLLER://:9093,EXTERNAL://:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9094,EXTERNAL://${DOCKER_HOST_IP}:9092"
      KAFKA_BROKER_ID: "1"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_DELETE_TOPIC_ENABLE: "true"
      KAFKA_CFG_LOG_RETENTION_HOURS: 2
    logging:
      options:
        max-size: "10m"  
        max-file: "5"

  kafka_init:
    image: bitnami/kafka:latest
    depends_on:
      kafka:
        condition: service_started
    volumes:
      - ./scripts/kafka/kafka_init.sh:/kafka_init.sh
    entrypoint: ["/bin/sh", "kafka_init.sh"]

  ode:
    build: .
    image: jpoode_ode:latest
    ports:
      - "8080:8080"
      - "9090:9090"
      - "46753:46753/udp"
      - "46800:46800/udp"
      - "5555:5555/udp"
      - "6666:6666/udp"
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
      ZK: ${DOCKER_HOST_IP}:2181
      SPRING_CONFIG_LOCATION: /host_share/config/
      ODE_SECURITY_SVCS_SIGNATURE_URI: ${ODE_SECURITY_SVCS_SIGNATURE_URI}
      ODE_RSU_USERNAME: ${ODE_RSU_USERNAME}
      ODE_RSU_PASSWORD: ${ODE_RSU_PASSWORD}
      DATA_SIGNING_ENABLED_RSU: ${DATA_SIGNING_ENABLED_RSU}
      DATA_SIGNING_ENABLED_SDW: ${DATA_SIGNING_ENABLED_SDW}
      DEFAULT_SNMP_PROTOCOL: ${DEFAULT_SNMP_PROTOCOL}
    depends_on:
      - kafka
    volumes:
      - ${DOCKER_SHARED_VOLUME}/ode:/jpo-ode

  adm:
    build: ./asn1_codec
    image: jpoode_acm:latest
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
      ACM_CONFIG_FILE: adm.properties
      ACM_LOG_TO_CONSOLE: ${ADM_LOG_TO_CONSOLE}
      ACM_LOG_TO_FILE: ${ADM_LOG_TO_FILE}
      ACM_LOG_LEVEL: ${ADM_LOG_LEVEL}
    depends_on:
      - kafka
    volumes:
      - ${DOCKER_SHARED_VOLUME}/adm:/asn1_codec_share
    restart: on-failure

  aem:
    build: ./asn1_codec
    image: jpoode_acm:latest
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
      ACM_CONFIG_FILE: aem.properties
      ACM_LOG_TO_CONSOLE: ${AEM_LOG_TO_CONSOLE}
      ACM_LOG_TO_FILE: ${AEM_LOG_TO_FILE}
      ACM_LOG_LEVEL: ${AEM_LOG_LEVEL}
    depends_on:
      - kafka
    volumes:
      - ${DOCKER_SHARED_VOLUME}/aem:/asn1_codec_share

  ppm_bsm:
    build:
      context: ./jpo-cvdp
      dockerfile: Dockerfile-nsv
      args:
        PPM_CONFIG_FILE: ${PPM_BSM_CONFIG_FILE}
        PPM_MAP_FILE: ${PPM_MAP_FILE}
    image: jpoode_ppm_bsm:latest
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
      PPM_CONFIG_FILE: ${PPM_BSM_CONFIG_FILE}
      PPM_MAP_FILE: ${PPM_MAP_FILE}
      PPM_LOG_TO_CONSOLE: ${PPM_BSM_LOG_TO_CONSOLE}
      PPM_LOG_TO_FILE: ${PPM_BSM_LOG_TO_FILE}
      PPM_LOG_LEVEL: ${PPM_BSM_LOG_LEVEL}
    volumes:
      - ${DOCKER_SHARED_VOLUME}/ppm_bsm:/ppm_data
    depends_on:
      - kafka
    restart: on-failure

  ppm_tim:
    build:
      context: ./jpo-cvdp
      dockerfile: Dockerfile-nsv
      args:
        PPM_CONFIG_FILE: ${PPM_TIM_CONFIG_FILE}
        PPM_MAP_FILE: ${PPM_MAP_FILE}
    image: jpoode_ppm_tim:latest
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
      PPM_CONFIG_FILE: ${PPM_TIM_CONFIG_FILE}
      PPM_MAP_FILE: ${PPM_MAP_FILE}
      PPM_LOG_TO_CONSOLE: ${PPM_TIM_LOG_TO_CONSOLE}
      PPM_LOG_TO_FILE: ${PPM_TIM_LOG_TO_FILE}
      PPM_LOG_LEVEL: ${PPM_TIM_LOG_LEVEL}
    volumes:
      - ${DOCKER_SHARED_VOLUME}/ppm_tim:/ppm_data
    depends_on:
      - kafka

  cvpep_bsm_depositor:
    build: ./jpo-s3-deposit
    image: jpoode_s3dep:latest
    environment:
      AWS_ACCESS_KEY_ID: ${CVPEP_BSM_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${CVPEP_BSM_SECRET_ACCESS_KEY}
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
      DEPOSIT_BUCKET_NAME: ${CVPEP_BSM_BUCKET_NAME}
      DEPOSIT_KEY_NAME: ${CVPEP_BSM_DEPOSIT_KEY}
      DEPOSIT_TOPIC: ${CVPEP_BSM_TOPIC}
    depends_on:
     - kafka

  rde_bsm_depositor:
    build: ./jpo-s3-deposit
    image: jpoode_s3dep:latest
    environment:
      AWS_ACCESS_KEY_ID: ${RDE_BSM_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${RDE_BSM_SECRET_ACCESS_KEY}
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
      DEPOSIT_BUCKET_NAME: ${RDE_BSM_BUCKET_NAME}
      DEPOSIT_KEY_NAME: ${RDE_BSM_DEPOSIT_KEY}
      DEPOSIT_TOPIC: ${RDE_BSM_TOPIC}
    depends_on:
     - kafka

  cvpep_tim_depositor:
    build: ./jpo-s3-deposit
    image: jpoode_s3dep:latest
    environment:
      AWS_ACCESS_KEY_ID: ${CVPEP_TIM_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${CVPEP_TIM_SECRET_ACCESS_KEY}
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
      DEPOSIT_BUCKET_NAME: ${CVPEP_TIM_BUCKET_NAME}
      DEPOSIT_KEY_NAME: ${CVPEP_TIM_DEPOSIT_KEY}
      DEPOSIT_TOPIC: ${CVPEP_TIM_TOPIC}
    depends_on:
     - kafka

  rde_tim_depositor:
    build: ./jpo-s3-deposit
    image: jpoode_s3dep:latest
    environment:
      AWS_ACCESS_KEY_ID: ${RDE_TIM_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${RDE_TIM_SECRET_ACCESS_KEY}
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
      DEPOSIT_BUCKET_NAME: ${RDE_TIM_BUCKET_NAME}
      DEPOSIT_KEY_NAME: ${RDE_TIM_DEPOSIT_KEY}
      DEPOSIT_TOPIC: ${RDE_TIM_TOPIC}
    depends_on:
     - kafka

  sdw_depositor:
    build: ./jpo-sdw-depositor
    image: jpoode_sdwdep:latest
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
      #SDW_GROUP_ID: ${SDW_GROUP_ID}
      #SDW_KAFKA_PORT: ${SDW_KAFKA_PORT}
      #SDW_DESTINATION_URL: ${SDW_DESTINATION_URL}
      SDW_SUBSCRIPTION_TOPICS: topic.SDWDepositorInput
      SDW_USERNAME: ${SDW_USERNAME}
      SDW_PASSWORD: ${SDW_PASSWORD}
    depends_on:
     - kafka
     - ode

  sec:
    build: ./jpo-security-svcs
    image: jpoode_sec:latest
    ports:
     - "8090:8090"
    environment:
      SEC_CRYPTO_SERVICE_BASE_URI: ${SEC_CRYPTO_SERVICE_BASE_URI}
