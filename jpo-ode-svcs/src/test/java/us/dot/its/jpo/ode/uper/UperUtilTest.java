package us.dot.its.jpo.ode.uper;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import java.util.HashMap;

import org.apache.tomcat.util.buf.HexUtils;
import org.junit.jupiter.api.Test;

import us.dot.its.jpo.ode.model.OdeAsn1Payload;
import us.dot.its.jpo.ode.util.JsonUtils.JsonUtilsException;

public class UperUtilTest {
    UperUtil testUperUtil;

    @Test
    public void testStripDot2Header() {
        String testHexString = "10110014000000";
        String testPayloadStartFlag = "0014";
        String expectedValue = "0014000000";
        assertEquals(expectedValue, UperUtil.stripDot2Header(testHexString, testPayloadStartFlag));
    }

    @Test
    public void testStripDot2HeaderBadData() {
        String testHexString = "0014";
        String testPayloadStartFlag = "0015";
        String expectedValue = "BAD DATA";
        assertEquals(expectedValue, UperUtil.stripDot2Header(testHexString, testPayloadStartFlag));
    }

    @Test
    public void testStripDot3Header() {
        byte[] testPacket = { 0x10, 0x20, 0x00, 0x1f, 0x00, 0x00 };
        byte[] testExpected = { 0x00, 0x1f, 0x00, 0x00 };
        HashMap<String, String> testMsgStartFlag = new HashMap<>();
        testMsgStartFlag.put("TIM", "001f");
        byte[] testResult = UperUtil.stripDot3Header(testPacket, testMsgStartFlag);
        assertArrayEquals(testExpected, testResult);
    }

    @Test
    public void testStripDot3HeaderWithDot2StartIndex() {
        byte[] testPacket = { 0x0, 0x01, 0x03, (byte) 0x81, 0x00, 0x00, 0x1f, 0x00 };
        byte[] testExpected = { 0x03, (byte) 0x81, 0x00, 0x00, 0x1f, 0x00 };
        HashMap<String, String> testMsgStartFlag = new HashMap<>();
        testMsgStartFlag.put("TIM", "001f");
        byte[] testResult = UperUtil.stripDot3Header(testPacket, testMsgStartFlag);
        assertArrayEquals(testExpected, testResult);
    }

    @Test
    public void testStripDot3HeaderString() {
        String testPacketString = "0102001f0000";
        String testExpectedString = "001f0000";
        String testMsgStartFlag = "001f";
        assertEquals(testExpectedString, UperUtil.stripDot3Header(testPacketString, testMsgStartFlag));
    }

    @Test
    public void testStripDot3HeaderStringWithDot2StartIndex() {
        String testPacketString = "0001038100001f00";
        String testExpectedString = "038100001f00";
        String testMsgStartFlag = "001f";
        assertEquals(testExpectedString, UperUtil.stripDot3Header(testPacketString, testMsgStartFlag));
    }

    @Test
    public void testDetermineMessageType() throws JsonUtilsException {
        String mapHexString
        OdeAsn1Payload mapPayload = new OdeAsn1Payload(HexUtils.fromHexString(mapHexString));
        assertEquals(UperUtil.determineMessageType(mapPayload), "MAP");

        String timHexString
        OdeAsn1Payload timPayload = new OdeAsn1Payload(HexUtils.fromHexString(timHexString));
        assertEquals(UperUtil.determineMessageType(timPayload), "TIM");
    }

}
